{"version":3,"sources":["features/editor/Editor.tsx","features/status-bar/StatusBar.tsx","features/menu-bar/components/ApplicationMenu.tsx","features/menu-bar/components/EditorMenu.tsx","features/menu-bar/components/EtcMenu.tsx","contants.ts","features/menu-bar/MenuBar.tsx","features/explorer/components/ImageList.tsx","features/explorer/components/ImageListItem.tsx","features/explorer/Explorer.tsx","features/app/App.tsx","serviceWorker.ts","styles/ThemeContext.tsx","styles/GlobalStyle.tsx","index.tsx","graphql/index.ts","graphql/operations.ts","graphql/resolvers/fileEntry/Mutation.ts","graphql/resolvers/fileEntry/Query.ts","graphql/resolvers/fileEntry/index.ts","graphql/resolvers/configureResolvers.ts","core/file-manager/FileManager.ts","graphql/configureClient.ts","core/file-manager/configureFileManager.ts"],"names":["styles","editor","css","Editor","useState","img","setImg","type","accept","onChange","e","file","target","files","fileReader","FileReader","addEventListener","event","result","readAsDataURL","src","statusBar","StatusBar","applicationMenu","menuItem","ApplicationMenu","useCreateFileEntryMutation","refetchQueries","query","FileEntriesDocument","awaitRefetchQueries","createFileEntryMutation","a","variables","input","editorMenu","icon","EditorMenu","size","etcMenu","EtcMenu","openGithub","useCallback","window","open","onClick","menuBar","MenuBar","list","ImageList","children","item","name","ImageListItem","id","useDeleteFileEntryMutation","deleteFileEntry","explorer","Explorer","fileEntriesData","useFileEntriesQuery","data","fileEntries","items","setItems","useEffect","Promise","all","map","blob","res","then","key","wrapper","app","activityBarWrapper","row","App","Boolean","location","hostname","match","ThemeProvider","theme","createMuiTheme","palette","primary","blueGrey","secondary","grey","GlobalStyle","master","client","configureClient","Root","ApolloProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","CreateFileEntryDocument","gql","baseOptions","ApolloReactHooks","DeleteFileEntryDocument","createFileEntry","_","fileManager","create","delete","fileEntry","read","__","readAll","resolvers","Mutation","Query","FileManager","blobStorage","localforage","createInstance","driver","INDEXEDDB","metaStorage","LOCALSTORAGE","v4","blobToArrayBuffer","arrayBuffer","meta","extractFileMetadata","this","setItem","getItem","arrayBufferToBlob","keys","metas","arrayBuffers","idx","removeItem","readAsArrayBuffer","rej","onload","onerror","Blob","ctx","resolver","Object","fromEntries","entries","resolverObject","resolverFn","root","args","context","info","cache","InMemoryCache","ApolloClient"],"mappings":"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","file":"static/js/main.804a0e17.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { useState } from 'react'\n\nconst Editor: React.FC = () => {\n  const [img, setImg] = useState<string>('')\n\n  return (\n    <div css={styles.editor}>\n      <label\n        css={css`\n          display: block;\n          width: 100%;\n          height: 100%;\n        `}\n      >\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          css={css`\n            display: none;\n          `}\n          onChange={e => {\n            const file = e.target.files?.[0]\n            if (!file) return\n\n            const fileReader = new FileReader()\n            fileReader.addEventListener('load', event => {\n              setImg((event.target?.result as string) ?? null)\n            })\n            fileReader.readAsDataURL(file)\n          }}\n        />\n        <img\n          css={css`\n            width: 100%;\n            height: 100%;\n            object-fit: contain;\n          `}\n          src={img}\n        />\n      </label>\n    </div>\n  )\n}\nconst styles = {\n  editor: css`\n    width: 100%;\n    background-color: black;\n    overflow: hidden;\n  `,\n}\n\nexport default Editor\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\n\nconst StatusBar: React.FC = () => {\n  return <div css={styles.statusBar}>Idle</div>\n}\n\nconst styles = {\n  statusBar: css`\n    background-color: rgb(0, 120, 210);\n    color: white;\n    font-weight: 700;\n    padding: 6px 24px;\n  `,\n}\n\nexport default StatusBar\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { useCreateFileEntryMutation, FileEntriesDocument } from '~/graphql'\n\nconst ApplicationMenu: React.FC = () => {\n  const [createFileEntryMutation] = useCreateFileEntryMutation({\n    refetchQueries: [{ query: FileEntriesDocument }],\n    awaitRefetchQueries: true,\n  })\n  return (\n    <div css={styles.applicationMenu}>\n      <span css={styles.menuItem}>여기에 로고 입력</span>\n      <label>\n        <span css={styles.menuItem}>File</span>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          css={css`\n            display: none;\n          `}\n          onChange={async e => {\n            const file = e.target.files?.[0]\n            if (!file) return\n            await createFileEntryMutation({ variables: { input: { file } } })\n          }}\n        />\n      </label>\n      <span css={styles.menuItem}>Edit</span>\n    </div>\n  )\n}\n\nconst styles = {\n  applicationMenu: css`\n    display: flex;\n    flex: 1;\n    justify-content: flex-start;\n  `,\n  menuItem: css`\n    margin: 0 12px;\n    cursor: pointer;\n    &:hover {\n      color: white;\n    }\n  `,\n}\n\nexport default ApplicationMenu\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { MdBrush, MdUndo, MdRedo, MdTranslate } from 'react-icons/md'\n\nconst EditorMenu: React.FC = () => {\n  return (\n    <div css={styles.editorMenu}>\n      <MdBrush css={styles.icon} size={24} />\n      <MdTranslate css={styles.icon} size={24} />\n      <MdUndo css={styles.icon} size={24} />\n      <MdRedo css={styles.icon} size={24} />\n    </div>\n  )\n}\n\nconst styles = {\n  editorMenu: css`\n    display: flex;\n    flex: 1;\n    justify-content: center;\n  `,\n  icon: css`\n    margin: 12px;\n    cursor: pointer;\n    transition: color 100ms ease;\n    &:hover {\n      color: white;\n    }\n  `,\n}\n\nexport default EditorMenu\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { FaGithub } from 'react-icons/fa'\nimport { useCallback } from 'react'\nimport { GITHUB_LINK } from '~/contants'\n\nconst EtcMenu: React.FC = () => {\n  const openGithub = useCallback(() => window.open(GITHUB_LINK), [])\n\n  return (\n    <div css={styles.etcMenu}>\n      <FaGithub css={styles.icon} size={32} onClick={openGithub} />\n    </div>\n  )\n}\n\nconst styles = {\n  etcMenu: css`\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n  `,\n  icon: css`\n    margin: 12px;\n    cursor: pointer;\n    transition: color 100ms ease;\n    &:hover {\n      color: white;\n    }\n  `,\n}\n\nexport default EtcMenu\n","export const GITHUB_LINK = 'https://github.com/szmc-team/SickZil-Machine'\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport ApplicationMenu from './components/ApplicationMenu'\nimport EditorMenu from './components/EditorMenu'\nimport EtcMenu from './components/EtcMenu'\n\nconst MenuBar: React.FC = () => {\n  return (\n    <header css={styles.menuBar}>\n      <ApplicationMenu />\n      <EditorMenu />\n      <EtcMenu />\n    </header>\n  )\n}\n\nconst styles = {\n  menuBar: css`\n    flex-shrink: 0;\n    width: 100%;\n    height: 48px;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n      0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n    background-color: rgb(32, 32, 32);\n    color: rgb(192, 192, 192);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 12px;\n  `,\n}\n\nexport default MenuBar\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\n\nconst ImageList: React.FC = ({ children }) => {\n  return <ul css={styles.list}>{children}</ul>\n}\n\nconst styles = {\n  list: css`\n    height: 100%;\n    overflow-y: scroll;\n    display: flex;\n    flex-direction: column;\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n  `,\n}\n\nexport default ImageList\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { FilePreview } from '../types'\nimport { useDeleteFileEntryMutation, FileEntriesDocument } from '~/graphql'\n\ninterface ImageListItemProps extends FilePreview {}\n\nconst ImageListItem: React.FC<ImageListItemProps> = ({ id, img, name }) => {\n  const [deleteFileEntry] = useDeleteFileEntryMutation({\n    refetchQueries: [{ query: FileEntriesDocument }],\n    awaitRefetchQueries: true,\n  })\n\n  return (\n    <li css={styles.item}>\n      <img src={img} css={styles.img} />\n      <div>\n        <span css={styles.name}>{name}</span>\n        <button\n          onClick={() => deleteFileEntry({ variables: { input: { id } } })}\n        >\n          DELETE\n        </button>\n      </div>\n    </li>\n  )\n}\n\nconst styles = {\n  item: css`\n    cursor: pointer;\n    padding: 6px 12px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n\n    margin: 6px 0;\n    transition: background-color 100ms ease;\n    &:hover {\n      background-color: rgb(32, 32, 32);\n    }\n  `,\n  img: css`\n    background-color: gray;\n    width: 48px;\n    height: 48px;\n    object-fit: contain;\n  `,\n  name: css`\n    margin-top: 6px;\n    margin-left: 12px;\n    font-size: 12px;\n  `,\n}\n\nexport default ImageListItem\n","/** @jsx jsx */\nimport { useState, useEffect } from 'react'\nimport { jsx, css } from '@emotion/core'\nimport { useFileEntriesQuery } from '~/graphql'\nimport ImageList from './components/ImageList'\nimport ImageListItem from './components/ImageListItem'\nimport { FilePreview } from './types'\n\nconst Explorer: React.FC = () => {\n  const { data: fileEntriesData } = useFileEntriesQuery()\n  const fileEntries = fileEntriesData?.fileEntries\n\n  const [items, setItems] = useState<FilePreview[]>([])\n\n  useEffect(() => {\n    Promise.all(\n      (fileEntries ?? []).map(\n        ({ id, name, blob }) =>\n          new Promise<FilePreview>(res => {\n            const fileReader = new FileReader()\n            fileReader.addEventListener('load', event =>\n              res({ id, name, img: event.target!.result as string })\n            )\n\n            fileReader.readAsDataURL(blob)\n          })\n      )\n    ).then(items => setItems(items))\n  }, [fileEntries])\n\n  return (\n    <div css={styles.explorer}>\n      <ImageList>\n        {items.map(({ id, name, img }) => (\n          <ImageListItem key={id} id={id} name={name} img={img} />\n        ))}\n      </ImageList>\n    </div>\n  )\n}\n\nconst styles = {\n  explorer: css`\n    display: flex;\n    flex-direction: column;\n    background-color: rgb(56, 56, 56);\n    color: white;\n    width: 240px;\n    height: 100%;\n  `,\n}\n\nexport default Explorer\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport Editor from '../editor'\nimport StatusBar from '../status-bar'\nimport MenuBar from '../menu-bar'\nimport Explorer from '../explorer'\n\nconst App: React.FC = () => {\n  return (\n    <div css={styles.wrapper}>\n      <div css={styles.app}>\n        <MenuBar />\n        <div css={styles.row}>\n          <Editor />\n          <div css={styles.activityBarWrapper}>\n            <Explorer />\n          </div>\n        </div>\n        <StatusBar />\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  wrapper: css`\n    width: 100vw;\n    height: 100vh;\n  `,\n  app: css`\n    width: 100%;\n    height: 100%;\n    color: var(--text-color);\n    background-color: var(--bg-color);\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  `,\n  activityBarWrapper: css`\n    flex-shrink: 0;\n  `,\n  row: css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    overflow: hidden;\n  `,\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport {\n  ThemeProvider as MaterialThemeProvider,\n  createMuiTheme,\n} from '@material-ui/core'\n\nimport { blueGrey, grey } from '@material-ui/core/colors'\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  const theme = createMuiTheme({\n    palette: { type: 'dark', primary: blueGrey, secondary: grey },\n  })\n  return (\n    <MaterialThemeProvider theme={theme}> {children}</MaterialThemeProvider>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, Global, css } from '@emotion/core'\n\nexport const GlobalStyle = () => <Global styles={styles.master} />\n\nconst styles = {\n  master: css`\n    body {\n      margin: 0;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n        'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n        'Helvetica Neue', sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n  `,\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { MemoryRouter } from 'react-router-dom'\nimport { SnackbarProvider } from 'notistack'\nimport 'typeface-roboto'\nimport App from './features/app'\nimport * as serviceWorker from './serviceWorker'\nimport { GlobalStyle, ThemeProvider } from './styles'\nimport { ApolloProvider } from '@apollo/client'\nimport { configureClient } from './graphql'\n\nconst client = configureClient()\nconst Root: React.FC = () => (\n  <ApolloProvider client={client}>\n    <MemoryRouter>\n      <SnackbarProvider>\n        <ThemeProvider>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </SnackbarProvider>\n    </MemoryRouter>\n  </ApolloProvider>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","export * from './configureClient'\nexport * from './operations'\nexport * from './types'\n","import gql from 'graphql-tag'\nimport * as ApolloReactCommon from '@apollo/client'\nimport * as ApolloReactHooks from '@apollo/client'\nexport type Maybe<T> = T | null\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  Blob: Blob\n  File: File\n}\n\nexport type CreateFileEntryInput = {\n  file: Scalars['File']\n}\n\nexport type DeleteFileEntryInput = {\n  id: Scalars['ID']\n}\n\nexport type FileEntry = {\n  __typename?: 'FileEntry'\n  id: Scalars['ID']\n  blob: Scalars['Blob']\n  name: Scalars['String']\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  createFileEntry: Scalars['ID']\n  deleteFileEntry: Scalars['Boolean']\n}\n\nexport type MutationCreateFileEntryArgs = {\n  input: CreateFileEntryInput\n}\n\nexport type MutationDeleteFileEntryArgs = {\n  input: DeleteFileEntryInput\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  fileEntry: Maybe<FileEntry>\n  fileEntries: Array<FileEntry>\n}\n\nexport type QueryFileEntryArgs = {\n  id: Scalars['ID']\n}\n\nexport type CreateFileEntryMutationVariables = {\n  input: CreateFileEntryInput\n}\n\nexport type CreateFileEntryMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'createFileEntry'\n>\n\nexport type DeleteFileEntryMutationVariables = {\n  input: DeleteFileEntryInput\n}\n\nexport type DeleteFileEntryMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'deleteFileEntry'\n>\n\nexport type FileEntriesQueryVariables = {}\n\nexport type FileEntriesQuery = { __typename?: 'Query' } & {\n  fileEntries: Array<\n    { __typename?: 'FileEntry' } & Pick<FileEntry, 'id' | 'name' | 'blob'>\n  >\n}\n\nexport type FileEntryQueryVariables = {\n  id: Scalars['ID']\n}\n\nexport type FileEntryQuery = { __typename?: 'Query' } & {\n  fileEntry: Maybe<\n    { __typename?: 'FileEntry' } & Pick<FileEntry, 'id' | 'name' | 'blob'>\n  >\n}\n\nexport const CreateFileEntryDocument = gql`\n  mutation createFileEntry($input: CreateFileEntryInput!) {\n    createFileEntry(input: $input) @client\n  }\n`\nexport type CreateFileEntryMutationFn = ApolloReactCommon.MutationFunction<\n  CreateFileEntryMutation,\n  CreateFileEntryMutationVariables\n>\n\n/**\n * __useCreateFileEntryMutation__\n *\n * To run a mutation, you first call `useCreateFileEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateFileEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createFileEntryMutation, { data, loading, error }] = useCreateFileEntryMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateFileEntryMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    CreateFileEntryMutation,\n    CreateFileEntryMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    CreateFileEntryMutation,\n    CreateFileEntryMutationVariables\n  >(CreateFileEntryDocument, baseOptions)\n}\nexport type CreateFileEntryMutationHookResult = ReturnType<\n  typeof useCreateFileEntryMutation\n>\nexport type CreateFileEntryMutationResult = ApolloReactCommon.MutationResult<\n  CreateFileEntryMutation\n>\nexport type CreateFileEntryMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  CreateFileEntryMutation,\n  CreateFileEntryMutationVariables\n>\nexport const DeleteFileEntryDocument = gql`\n  mutation deleteFileEntry($input: DeleteFileEntryInput!) {\n    deleteFileEntry(input: $input) @client\n  }\n`\nexport type DeleteFileEntryMutationFn = ApolloReactCommon.MutationFunction<\n  DeleteFileEntryMutation,\n  DeleteFileEntryMutationVariables\n>\n\n/**\n * __useDeleteFileEntryMutation__\n *\n * To run a mutation, you first call `useDeleteFileEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteFileEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteFileEntryMutation, { data, loading, error }] = useDeleteFileEntryMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDeleteFileEntryMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    DeleteFileEntryMutation,\n    DeleteFileEntryMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    DeleteFileEntryMutation,\n    DeleteFileEntryMutationVariables\n  >(DeleteFileEntryDocument, baseOptions)\n}\nexport type DeleteFileEntryMutationHookResult = ReturnType<\n  typeof useDeleteFileEntryMutation\n>\nexport type DeleteFileEntryMutationResult = ApolloReactCommon.MutationResult<\n  DeleteFileEntryMutation\n>\nexport type DeleteFileEntryMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  DeleteFileEntryMutation,\n  DeleteFileEntryMutationVariables\n>\nexport const FileEntriesDocument = gql`\n  query fileEntries {\n    fileEntries @client {\n      id\n      name\n      blob\n    }\n  }\n`\n\n/**\n * __useFileEntriesQuery__\n *\n * To run a query within a React component, call `useFileEntriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFileEntriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFileEntriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFileEntriesQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    FileEntriesQuery,\n    FileEntriesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<FileEntriesQuery, FileEntriesQueryVariables>(\n    FileEntriesDocument,\n    baseOptions\n  )\n}\nexport function useFileEntriesLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    FileEntriesQuery,\n    FileEntriesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    FileEntriesQuery,\n    FileEntriesQueryVariables\n  >(FileEntriesDocument, baseOptions)\n}\nexport type FileEntriesQueryHookResult = ReturnType<typeof useFileEntriesQuery>\nexport type FileEntriesLazyQueryHookResult = ReturnType<\n  typeof useFileEntriesLazyQuery\n>\nexport type FileEntriesQueryResult = ApolloReactCommon.QueryResult<\n  FileEntriesQuery,\n  FileEntriesQueryVariables\n>\nexport const FileEntryDocument = gql`\n  query fileEntry($id: ID!) {\n    fileEntry(id: $id) @client {\n      id\n      name\n      blob\n    }\n  }\n`\n\n/**\n * __useFileEntryQuery__\n *\n * To run a query within a React component, call `useFileEntryQuery` and pass it any options that fit your needs.\n * When your component renders, `useFileEntryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFileEntryQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useFileEntryQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    FileEntryQuery,\n    FileEntryQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<FileEntryQuery, FileEntryQueryVariables>(\n    FileEntryDocument,\n    baseOptions\n  )\n}\nexport function useFileEntryLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    FileEntryQuery,\n    FileEntryQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<FileEntryQuery, FileEntryQueryVariables>(\n    FileEntryDocument,\n    baseOptions\n  )\n}\nexport type FileEntryQueryHookResult = ReturnType<typeof useFileEntryQuery>\nexport type FileEntryLazyQueryHookResult = ReturnType<\n  typeof useFileEntryLazyQuery\n>\nexport type FileEntryQueryResult = ApolloReactCommon.QueryResult<\n  FileEntryQuery,\n  FileEntryQueryVariables\n>\n\nexport interface IntrospectionResultData {\n  __schema: {\n    types: {\n      kind: string\n      name: string\n      possibleTypes: {\n        name: string\n      }[]\n    }[]\n  }\n}\nconst result: IntrospectionResultData = {\n  __schema: {\n    types: [],\n  },\n}\nexport default result\n","import {\n  MutationCreateFileEntryArgs,\n  MutationDeleteFileEntryArgs,\n  ResolverContext,\n} from '~/graphql'\n\nexport async function createFileEntry(\n  _: void,\n  { input: { file } }: MutationCreateFileEntryArgs,\n  { fileManager }: ResolverContext\n) {\n  const id = await fileManager.create(file)\n  return id\n}\n\nexport async function deleteFileEntry(\n  _: void,\n  { input: { id } }: MutationDeleteFileEntryArgs,\n  { fileManager }: ResolverContext\n) {\n  await fileManager.delete(id)\n  return true\n}\n","import { ResolverContext, QueryFileEntryArgs } from '~/graphql'\n\nexport async function fileEntry(\n  _: void,\n  { id }: QueryFileEntryArgs,\n  { fileManager }: ResolverContext\n) {\n  const fileEntry = await fileManager.read(id)\n  return fileEntry\n}\n\nexport async function fileEntries(\n  _: void,\n  __: void,\n  { fileManager }: ResolverContext\n) {\n  const fileEntries = await fileManager.readAll()\n  return fileEntries\n}\n","import * as Mutation from './Mutation'\nimport * as Query from './Query'\n\nexport const fileEntryResolver = { Mutation, Query }\n","import { fileEntryResolver } from './fileEntry'\nimport { ResolverContext } from '../types'\n\nconst resolvers = [fileEntryResolver]\n\nexport const configureResolvers = (ctx: ResolverContext) =>\n  resolvers.map(resolver =>\n    Object.fromEntries(\n      Object.entries<any>(resolver).map(([name, resolverObject]) => [\n        name,\n        Object.fromEntries(\n          Object.entries<any>(resolverObject).map(([name, resolverFn]) => [\n            name,\n            (root: any, args: any, context: any, info: any) =>\n              resolverFn(root, args, { ...context, ...ctx }, info),\n          ])\n        ),\n      ])\n    )\n  )\n","import localforage from 'localforage'\nimport { v4 } from 'uuid'\n\nexport class FileManager {\n  async create(file: File) {\n    const id = v4()\n    const arrayBuffer = await blobToArrayBuffer(file)\n    const meta = extractFileMetadata(id, file)\n\n    await this.blobStorage.setItem(id, arrayBuffer)\n    await this.metaStorage.setItem(id, meta)\n\n    return id\n  }\n\n  async read(id: string) {\n    const arrayBuffer = await this.blobStorage.getItem<ArrayBuffer | null>(id)\n    const meta = await this.metaStorage.getItem<FileMetadata | null>(id)\n    if (!arrayBuffer || !meta) return null\n    const blob = arrayBufferToBlob(arrayBuffer)\n    const { name } = meta\n\n    return { id, name, blob }\n  }\n\n  async readAll() {\n    const keys = await this.metaStorage.keys()\n\n    const metas = await Promise.all(\n      keys.map(id => this.metaStorage.getItem<FileMetadata>(id))\n    )\n\n    const arrayBuffers = await Promise.all(\n      keys.map(id => this.blobStorage.getItem<ArrayBuffer>(id))\n    )\n\n    return metas.map((meta, idx) => ({\n      id: meta.id,\n      name: meta.name,\n      blob: arrayBufferToBlob(arrayBuffers[idx]),\n    }))\n  }\n\n  async delete(id: string) {\n    await this.blobStorage.removeItem(id)\n    await this.metaStorage.removeItem(id)\n    return id\n  }\n\n  private blobStorage = localforage.createInstance({\n    name: 'blob',\n    driver: localforage.INDEXEDDB,\n  })\n\n  private metaStorage = localforage.createInstance({\n    name: 'meta',\n    driver: localforage.LOCALSTORAGE,\n  })\n}\n\nasync function blobToArrayBuffer(blob: Blob) {\n  const fileReader = new FileReader()\n  fileReader.readAsArrayBuffer(blob)\n\n  return new Promise<ArrayBuffer>((res, rej) => {\n    fileReader.onload = ({ target }) =>\n      target ? res(target.result as ArrayBuffer) : rej()\n    fileReader.onerror = rej\n  })\n}\n\nfunction arrayBufferToBlob(arrayBuffer: ArrayBuffer) {\n  return new Blob([arrayBuffer])\n}\n\ninterface FileMetadata {\n  id: string\n  name: string\n}\n\nfunction extractFileMetadata(id: string, file: File) {\n  const metadata: FileMetadata = { id, name: file.name }\n  return metadata\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { configureResolvers } from './resolvers'\nimport { configureFileManager } from '../core/file-manager'\n\nexport function configureClient() {\n  const fileManager = configureFileManager()\n  const resolvers = configureResolvers({ fileManager })\n  const cache = new InMemoryCache()\n\n  return new ApolloClient({ cache, resolvers })\n}\n","import { FileManager } from './FileManager'\n\nexport function configureFileManager() {\n  return new FileManager()\n}\n"],"sourceRoot":""}